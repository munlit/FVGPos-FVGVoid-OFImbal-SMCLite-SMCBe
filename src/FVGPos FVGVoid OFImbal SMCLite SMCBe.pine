/// ╔═══════════════════════════════╗
/// ║ 	Fvg Positioning Bar			║
/// ╔═══════════════════════════════╗
/// ║ 	Liquidity Void Fvg			║
/// ║ 	Vacios de liquidez			║
/// ╔═══════════════════════════════╗
/// ║ 	OrderFlow Imbalance			║
/// ╔═══════════════════════════════╗
/// ║	SMC Lite					║
/// ║	@	Allen.					║
/// ║	©	Pmgjiv FluidTrades		║
/// ╚═══════════════════════════════╝

//@version=5
indicator("FVG Pos & FVG Void & OF Imbal & SMC Lite & SMC Be [@Allen]", "FVGpo & FVGvo & OFim & SMCl & SMC", overlay = true, max_boxes_count = 500, max_lines_count = 500, max_labels_count = 500, max_bars_back = 1000)

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Colors ──────
//// ───────────────────────

/// ─── Standard ──
	// color.aqua								= #00BCD4
	// color.blue								= #2196F3
	// color.teal								= #00897B
	// color.green								= #4CAF50
	// color.olive								= #808000
	// color.lime								= #00E676
	// color.yellow								= #FFEB3B
	// color.orange								= #FF9800
	// color.maroon								= #880E4F
	// color.red								= #FF5252
	// color.fuchsia							= #E040FB
	// color.purple								= #9C27B0
	// color.navy								= #311B92
	// color.black								= #363A45
	// color.gray								= #787B86
	// color.silver								= #B2B5BE
	// color.white								= #FFFFFF

/// ─── Ameritrade ───
	// AmeTrWhite								= #FFFFFF								// AmeritradeWhite
	// AmeTrGrayPlatinum						= #F7F7F7								// AmeritradeGrayPlatinum
AmeTrGrayNickel							= #F1F1F1								// AmeritradeGrayNickel
	// AmeTrGrayNickelDark20					= #C0C0C0								// AmeritradeGrayNickelDark20
	// AmeTrGrayAluminum						= #E6E7E9								// AmeritradeGrayAluminum
	// AmeTrGrayAsh								= #D8D8D8								// AmeritradeGrayAsh
	// AmeTrGrayStone							= #999999								// AmeritradeGrayStone
	// AmeTrGrayIron							= #666666								// AmeritradeGrayIron
	// AmeTrGrayCharcoal						= #333333								// AmeritradeGrayCharcoal
	// AmeTrBlack								= #000000								// AmeritradeBlack
	// AmeTrGreenCabbage						= #EBF6E9								// AmeritradeGreenCabbage
	// AmeTrGreenLight70						= #B4D6B2								// AmeritradeGreenLight70
	// AmeTrGreenLight50						= #83BC7F								// AmeritradeGreenLight50
	// AmeTrGreenNat							= #40a829								// AmeritradeGreenNat
	// AmeTrGreenLight20						= #399333								// AmeritradeGreenLight20
	// AmeTrGreen								= #087900								// AmeritradeGreen
	// AmeTrGreenDark20							= #066000								// AmeritradeGreenDark20
	// AmeTrGreenMoss							= #BEE7D3								// AmeritradeGreenMoss
	// AmeTrGreenMint							= #6DC4BC								// AmeritradeGreenMint
	// AmeTrGreenPine							= #38635A								// AmeritradeGreenPine
	// AmeTrRedRose								= #FAD1CF								// AmeritradeRedRose
	// AmeTrRedLight50							= #E08988								// AmeritradeRedLight50
	// AmeTrRedLight20							= #CD4241								// AmeritradeRedLight20
	// AmeTrRed									= #C11312								// AmeritradeRed
	// AmeTrRedDark20							= #940F0E								// AmeritradeRedDark20
	// AmeTrOrangePeach							= #FCE7CA								// AmeritradeOrangePeach
	// AmeTrOrangeCarrot						= #ED8902								// AmeritradeOrangeCarrot
	// AmeTrOOrangeYam							= #BD5310								// AmeritradeOOrangeYam
	// AmeTrBlueFrost							= #E1EEF9								// AmeritradeBlueFrost
	// AmeTrBlueLagoon							= #316486								// AmeritradeBlueLagoon
	// AmeTrBlueNavy							= #2A5673								// AmeritradeBlueNavy
	// AmeTrBlueNcean							= #64A1C6								// AmeritradeBlueNcean
	// AmeTrPurpleEggPlant						= #732181								// AmeritradePurpleEggPlant

/// ─── Axi ───
	// AxiPrimary								= #fc404d								// AxiPrimary				/// ► ◄ ▲ ▼
	// AxiSecondary								= #282424								// AxiSecondary				/// ↑ ↓ → ←
	// AxiAccent								= #61ce70								// AxiAccent
	// Axi7a46f22								= #d11c36								// Axi7a46f22				/// @|1↓→9|1→5|.-|_789_|	/// coint|1↓→6|1→6|.-|_47_|
	// Axi1519066c								= #fc404d								// Axi1519066c				/// @|1↓→6|1↓→6|!|_7_|		/// coint|1↓→9|1→4|.!|_4_|
	// Axi3d4fa1a1								= #f0ebe3								// Axi3d4fa1a1				/// @|1↓→9|1↓→9|!|_7_|		/// coint|1↓→9|1→6|.-|_1_|		/// ok|1↓→6|1→5|.-|_147_|		/// |1↓→9|1→4|.!|_4_|
	// Axi638b46c1								= #fcd758								// Axi638b46c1				/// @|1→↑12|.-|_147_|
	// Axid07bac9								= #f9b4a8								// Axid07bac9				/// @|1→↑12|.-|_741_|
	// Axie63a114								= #2c4d5a								// Axie63a114				/// @|1→↑12|.-|_852_|		/// gt|1→↑10|.-|_52_|			/// zoo|1→↑10|.-|_82_|			/// |1→↑11|.-|_82_|
	// Axi8bf0845								= #a4d866								// Axi8bf0845				/// @|1→↑12|.-|_852_|		/// thinkors|1→↑9|_8_|2|		/// book|1→↑9|_8_|2|			/// disc|1→↑10|.-|_63_|
	// Axi75c6da1								= #282424								// Axi75c6da1				/// @|1→↑12|.-|_963_|		/// lbx|1→↑11|.-|852|
	// Axi378280f								= #45c2c7								// Axi378280f				/// @|1↓→9|1→6|.|_4_|		/// ok|1↓→6|1→4|.!|_789_|
	// Axi4de92c5								= #6caddf								// Axi4de92c5				/// @|1→↑13|.-!|_963_|		/// exch|1→↑10|.-|_85_|
	// Axi413dab8			   					= #00275d								// Axi413dab8											/// hotm|1→↑10|.-|_7_|			/// ins|1→↑10|.-|_95_|
	// Axib3fab89								= #55165c								// Axib3fab89
	// Axi548138f								= #45c2c7								// Axi548138f				/// ► ◄ ▲ ▼
	// Axi5ed9920								= #ea1616								// Axi5ed9920				/// ↑ ↓ → ←
	// Axi70f7335								= #dd0606								// Axi70f7335

/// ─── GrayScale ───
	// GraySFocus								= #2d7aed								// GrayScaleFocus
	// GraySWhite								= #fff									// GrayScaleWhite
	// GraySBlack								= #000									// GrayScaleBlack
	// GraySPrimaryBlackberry					= #2e234b								// GrayScalePrimaryBlackberry
	// GraySPrimaryBlackberry40					= rgba(46, 35, 75, .4))					// GrayScalePrimaryBlackberry40
	// GraySPrimaryBlackberry65					= rgba(46, 35, 75, .65))				// GrayScalePrimaryBlackberry65
	// GraySPrimaryCoral						= #ffb198								// GrayScalePrimaryCoral
	// GraySSecondaryForestGreen				= #244024								// GrayScaleSecondaryForestGreen
	// GraySSecondaryKeyLime					= #b5ce6f								// GrayScaleSecondaryKeyLime
	// GraySSecondaryLavender					= #c5bfe4								// GrayScaleSecondaryLavender
	// GraySSecondaryLavender40					= rgba(197, 191, 228, .4))				// GrayScaleSecondaryLavender40
	// GraySsecondaryLavender60					= rgba(197, 191, 228, .6))				// GrayScalesecondaryLavender60
	// GrayShoverWhite							= #c0bdc9								// GrayScalehoverWhite
	// GrayShoverBlackberry						= #42326b								// GrayScalehoverBlackberry
	// GraySdisabledBlackberry					= #4d4466								// GrayScaledisabledBlackberry
	// GraySactiveBlackberry					= #4d4466								// GrayScaleactiveBlackberry
	// GrayShoverCcoral							= #ffcdbd								// GrayScalehoverCcoral
	// GraySactiveCcoral						= #ff9e80								// GrayScaleactiveCcoral
	// GrayShoverGray							= #827b93								// GrayScalehoverGray
	// GrayShoverGray2							= #6d6581								// GrayScalehoverGray2
	// GraySgrayCharcoal						= #282525								// GrayScalegrayCharcoal
	// GraySgrayCharcoal70						= rgba(40, 37, 37, .7))					// GrayScalegrayCharcoal70
	// GraySgrayCharcoal80						= rgba(40, 37, 37, .8))					// GrayScalegrayCharcoal80
	// GraySgrayLight							= #f5f5f5								// GrayScalegrayLight
	// GraySgrayMedium							= #eee									// GrayScalegrayMedium
	// GraySgray70								= #696666								// GrayScalegray70
	// GraySgrayDark							= #c1c1c1								// GrayScalegrayDark
	// GraySwebSeasalt		    				= #fafafc								// GrayScalewebSeasalt
GraySwebDivider							= #e9e7f1								// GrayScalewebDivider
	// GraySwebBackground						= #f3f2fa								// GrayScalewebBackground
	// GraySwebSecondaryText					= #77708a								// GrayScalewebSecondaryText
	// GraySwebStroke							= #d3ceeb								// GrayScalewebStroke
	// GraySwebErrors							= #e00000								// GrayScalewebErrors
	// GraySwebService							= #2d7aed								// GrayScalewebService

/// ─── Interactive ───
	// IntAcPrimary3							= hsla(355, 85%, 46%, 0.03)		    	// InteractivePrimary3
	// IntAcPrimary5							= hsla(355, 85%, 46%, 0.05)		    	// InteractivePrimary5
	// IntAcPrimary10							= hsla(355, 85%, 46%, 0.10)		    	// InteractivePrimary10
	// IntAcPrimary20							= hsla(355, 85%, 46%, 0.20)		    	// InteractivePrimary20
	// IntAcPrimary30							= hsla(355, 85%, 46%, 0.30)		    	// InteractivePrimary30
	// IntAcPrimary40							= hsla(355, 85%, 46%, 0.40)		    	// InteractivePrimary40
	// IntAcPrimary50							= hsla(355, 85%, 46%, 0.50)		    	// InteractivePrimary50
	// IntAcPrimary60							= hsla(355, 85%, 46%, 0.60)		    	// InteractivePrimary60
	// IntAcPrimary70							= hsla(355, 85%, 46%, 0.70)		    	// InteractivePrimary70
	// IntAcPrimary80							= hsla(355, 85%, 46%, 0.80)		    	// InteractivePrimary80
	// IntAcPrimary90							= hsla(355, 85%, 46%, 0.90)		    	// InteractivePrimary90
	// IntAcPrimary								= hsla(355, 85%, 46%, 1.0)				// InteractivePrimary
	// IntAcPrimaryDark10						= hsla(355, 85%, 41%, 1.0)				// InteractivePrimaryDark10
	// IntAcPrimaryDark20						= hsla(355, 85%, 36%, 1.0)				// InteractivePrimaryDark20
	// IntAcPrimaryDark30						= hsla(355, 85%, 31%, 1.0)				// InteractivePrimaryDark30
	// IntAcPrimaryDark40						= hsla(355, 85%, 26%, 1.0)				// InteractivePrimaryDark40
	// IntAcPrimaryDark50						= hsla(355, 85%, 21%, 1.0)				// InteractivePrimaryDark50
	// IntAcSecondary3							= hsla(0, 0%, 13%, 0.03)				// InteractiveSecondary3
	// IntAcSecondary5							= hsla(0, 0%, 13%, 0.05)				// InteractiveSecondary5
	// IntAcSecondary10							= hsla(0, 0%, 13%, 0.10)				// InteractiveSecondary10
	// IntAcSecondary20							= hsla(0, 0%, 13%, 0.20)				// InteractiveSecondary20
	// IntAcSecondary30							= hsla(0, 0%, 13%, 0.30)				// InteractiveSecondary30
	// IntAcSecondary40							= hsla(0, 0%, 13%, 0.40)				// InteractiveSecondary40
	// IntAcSecondary50							= hsla(0, 0%, 13%, 0.50)				// InteractiveSecondary50
	// IntAcSecondary60							= hsla(0, 0%, 13%, 0.60)				// InteractiveSecondary60
	// IntAcSecondary70							= hsla(0, 0%, 13%, 0.70)				// InteractiveSecondary70
	// IntAcSecondary80							= hsla(0, 0%, 13%, 0.80)				// InteractiveSecondary80
	// IntAcSecondary90							= hsla(0, 0%, 13%, 0.90)				// InteractiveSecondary90
	// IntAcSecondary							= hsla(0, 0%, 13%, 1.0)			    	// InteractiveSecondary
	// IntAcSecondaryDark10						= hsla(0, 0%, 10%, 1.0)			    	// InteractiveSecondaryDark10
	// IntAcSecondaryDark20						= hsla(0, 0%, 7%, 1.0)					// InteractiveSecondaryDark20
	// IntAcSecondaryDark30						= hsla(0, 0%, 4%, 1.0)					// InteractiveSecondaryDark30
	// IntAcSecondaryDark40						= hsla(0, 0%, 1%, 1.0)					// InteractiveSecondaryDark40
	// IntAcSecondaryDark50						= hsla(0, 0%, 0%, 1.0)					// InteractiveSecondaryDark50
	// IntAcTertiary3							= hsla(202, 76%, 19%, 0.03)		    	// InteractiveTertiary3
	// IntAcTertiary5							= hsla(202, 76%, 19%, 0.05)		    	// InteractiveTertiary5
	// IntAcTertiary10							= hsla(202, 76%, 19%, 0.10)		    	// InteractiveTertiary10
	// IntAcTertiary20							= hsla(202, 76%, 19%, 0.20)		    	// InteractiveTertiary20
	// IntAcTertiary30							= hsla(202, 76%, 19%, 0.30)		    	// InteractiveTertiary30
	// IntAcTertiary40							= hsla(202, 76%, 19%, 0.40)		    	// InteractiveTertiary40
	// IntAcTertiary50							= hsla(202, 76%, 19%, 0.50)		    	// InteractiveTertiary50
	// IntAcTertiary60							= hsla(202, 76%, 19%, 0.60)		    	// InteractiveTertiary60
	// IntAcTertiary70							= hsla(202, 76%, 19%, 0.70)		    	// InteractiveTertiary70
	// IntAcTertiary80							= hsla(202, 76%, 19%, 0.80)		    	// InteractiveTertiary80
	// IntAcTertiary90							= hsla(202, 76%, 19%, 0.90)		    	// InteractiveTertiary90
	// IntAcTertiary							= hsla(202, 76%, 19%, 1.0)				// InteractiveTertiary
	// IntAcTertiaryDark10						= hsla(202, 76%, 14%, 1.0)				// InteractiveTertiaryDark10
	// IntAcTertiaryDark20						= hsla(202, 76%, 9%, 1.0)				// InteractiveTertiaryDark20
	// IntAcTertiaryDark30						= hsla(202, 76%, 4%, 1.0)				// InteractiveTertiaryDark30
	// IntAcTertiaryDark40						= hsla(202, 76%, 0%, 1.0)				// InteractiveTertiaryDark40

/// ─── Visa ───
	// VisPrimary								= #1434CB								// VisaBrandPrimary			/// ► ◄ ▲ ▼
	// VisPrimaryLight							= #3B57DE								// VisaBrandPrimaryLight	/// ↑ ↓ → ←
	// VisPrimaryDark							= #021E4C								// VisaBrandPrimaryDark
	// VisSecondary								= #FCC015								// VisaBrandSecondary		/// VT|1↓→6|1→5|!|_7_(.)|	/// coint|1↓→6|1→4|_7_.|		/// ok|1↓→6|1→4|.|_1_|			/// |1↓→6|1→4|!|_7_|		/// |1→6|1→↓6|_1_|  #910
	// VisSecondaryLight						= #FFD700								// VisaBrandSecondaryLight	/// |1↓#→6|1↓→6|_789_|-!|	/// |1↓→6|1→4|-|_74_|
	// VisSecondaryDark							= #F7B600								// VisaBrandSecondaryDark	/// @|1↓→6|1→4|!|_789_|
	// VisTertiary7								= #2C2C2C								// VisaBrandTertiary7		/// @|1↓→6|1→6|.!|_4_(.)|
	// VisTertiary6								= #5C5C5C								// VisaBrandTertiary6		/// @|1↓→9|1→6|.|_7_|		/// ()@|1↓→9|1→6|!|_7_|		/// bix|1↓→6|1→3|.-|_1_|
	// VisTertiary5								= #979797								// VisaBrandTertiary5		/// @|1↓→9|1→5|.!|_7_|
	// VisTertiary4								= #B9B9B9								// VisaBrandTertiary4		/// @|1↓→6|1→5|-|_714_|		/// bix|1↓→3|1→5|.-|_789_|
	// VisTertiary3								= #DEDEDE								// VisaBrandTertiary3		/// @|1→↓6|1→5|_741_|
	// VisTertiary2								= #EEEEEE								// VisaBrandTertiary2									/// ap|1→↓6|1→5|!|_7_|
	// VisTertiary1								= #F7F7F7								// VisaBrandTertiary1		/// @|1→↑12|.-|_741_|		/// gt|1→↑10|.-|_6_|

/// ─── Latam ───
	// LatRedBackground							= rgb(232, 17, 75)						// Latam Red Background

/// ─── Arbe Robotics ───
ARoPrimary								= #0035FF								// ArbePrimary
	// ARoPrimaryLight							= #0640FF								// ArbePrimaryLight
	// ARoSecondary		    					= #04ebff								// ArbeSecondary

/// ─── AutoX ───
	// AxPrimary								= #2253F0								// AutoXPrimary
	// AxPrimaryLight							= #0050F9								// AutoXPrimaryLight
	// AxSecondary								= #75ebc0								// AutoXSecondary

/// ─── EEG ───
	// EEGSkyBlue30								= #01EBF9								// EEGSkyBlue30
	// EEGSkyBlue40								= #00E7FD								// EEGSkyBlue40
	// EEGFucsia40								= #FF00B1								// EEGFucsia40
	// EEGFucsia50								= #FE0CB6								// EEGFucsia50

/// ─── Bright Line ───
BrLiYel10								= #FBFD73								// BrightLine Yellow Light
	// BrLiYel20								= #FFFD52								// BrightLine Yellow Light
BrLiYel30								= #FDF43C								// BrightLineB Yellow High
BrLiYel40								= #FEF301								// BrightLineBackground Yellow Nit
	// BrLiYel50								= #FFDB00								// BrightLineBackground Yellow Base

/// ─── Waves Beh ───
	// WavBehPink20								= #FFB7FF								// WavBehPink20
	// WavBehFucsia50							= #DF36DF								// WavBehFucsia50
	// WavBehNude10								= #FFFDDF								// WavBehNude10
	// WavBehSky70								= #06B7FE								// WavBehSky70
	// WavBehAqua50								= #0CF2F2								// WavBehAqua50

/// ─── Victoria Secret ───
	// VictSecPink20							= #EDB3DD								// VictSecPink20
	// VictSecPink50							= #E651CD								// VictSecPink50
VictSecFucsia50							= #EA1889								// VictSecFucsia50
	// VictSecWine30							= #C2329F								// VictSecWine30
	// VictSecWine50							= #7D1250								// VictSecWine50
	// VictSecWine60							= #7C2558								// VictSecWine60

/// ─── Mongo DB ───
MongoSky10								= #E3FCF7								// MongoDBSky10
	// MongoYellow50							= #FFE212								// MongoDBYellow50
	// MongoLime50								= #B1FF05								// MongoDBLime50
	// MongoGreen50								= #00ED64								// MongoDBGreen50
	// MongoGreen60								= #13AA52								// MongoDBGreen60
	// MongoGreen70								= #00684A								// MongoDBGreen70
	// MongoGreen80								= #014E3D								// MongoDBGreen80
	// MongoGray50								= #42494F								// MongoDBGray50
	// MongoGray70								= #001E2B								// MongoDBGray70
	// MongoBlack50								= #231F20								// MongoDBBlack50

/// ─── Platzi ───
PlatziGreen30							= #ADEB42								// PlatziGreen60
	// PlatziGreen40							= #85C638								// PlatziGreen60
	// PlatziGreen50							= #95CA3E								// PlatziGreen50
	// PlatziGreen60							= #98CA3F								// PlatziGreen40
PlatziBlue50							= #24385B								// PlatziBlue50
PlatziBlue70							= #121F3D								// PlatziBlue70
	// PlatziBlue80								= #0C1633								// PlatziBlue80

/// ─── Ultr ───
	// UltrBlueSky10							= #59F2E9								// UltrBlueSky10
	// UltrBlueSky20							= #39F0EA								// UltrBlueSky20
	// UltrMenta10								= #E0F9EF								// UltrMenta10
	// UltrMenta20								= #80F3EC								// UtlrMenta20
	// UltrMenta30								= #7FFFD4								// UltrMenta30
	// UltrMenta40								= #73FFCA								// UltrMenta40
	// UltrMenta50								= #9CFFD7								// UtlrMenta50
	// UltrMenta60								= #4fffc0								// UtlrMenta60
	// UltrGreen50								= #95BD5F								// UltrGreen50
	// UltrRose40								= #FFA3E3								// UltrRose
	// UltrFucsia30								= #ff6fd3								// UltrFucsia
	// UltrLyla									= #7E57C2								// UltrLyla
	// UltrLightGray							= #787B86								// UltrLightGray
	// UltrRedNit								= #de0011								// UltrRedNit
	// UltrRed									= #db004b								// UltrRed
	// UltrBlue									= #003bde								// UltrBlue
	// UltrYellow								= #f4de1a								// UltrYellow
	// UltrSkyBlue								= #12cef8								// UltrSkyBlue
	// UltrOrange								= #ff5a00								// UltrOrange

/// ─── Allen ───
AllenSky10								= #CCF8FF								// AllenSky10
	// AllenSky20								= #80F3EC								// AllenSky20
	// AllenSky50								= #01ebf9								// AllenSky50

	// AllenMint10								= #E0F9EF								// AllenMint10
AllenMint20								= #9CFFD7								// AllenMint20
	// AllenMint30								= #7FFFD4								// AllenMint30
	// AllenMint40								= #73FFCA								// AllenMint40
	// AllenMint50								= #4fffc0								// AllenMint50
AllenMint60								= #33FFAC								// AllenMint60

	// AllenFucsia30							= #E06BAA								// AllenFucsia30
AllenFucsia50							= #EA1889
	// AllenWine50								= #E91E63								// AllenWine50
	// AllenWine60								= #E8114B								// AllenWine60

//// ─────────────────────────────────────────────────────────────────────

var grpFvgPosSect	= "Visualización Fvg Positioning"

colFvgPosLong		= input.color(color.new(BrLiYel40, 80),			title = "Compra",		inline = "colorFvgPosi",		group = grpFvgPosSect)
colFvgPosShort		= input.color(color.new(BrLiYel10, 70),			title = "Venta",		inline = "colorFvgPosi",		group = grpFvgPosSect)

//// ───────────────────────
/// ─── Fvg Posit ──
/// ─── Variables ──
//// ───────────────────────

vFvgAtrMulti		= input.float(0.25,	title = " ATR ",			step  = 0.25,			group = grpFvgPosSect)

//// ───────────────────────
/// ─── Fvg Posit ──
/// ─── Functions ──
//// ───────────────────────

/// ─── Art ──
fvgPosAtr			= nz(ta.atr(200)*vFvgAtrMulti, ta.cum(high - low) / (bar_index+1))

/// ─── Fvg detect ─
fvgDetectUp			= low	> high[2]	and close[1] > high[2]	and (low-high[2]) > fvgPosAtr
fvgDetectDown		= high	< low[2]	and close[1] < low[2]	and (low[2]-high) > fvgPosAtr

/// ─── Highest & Lowest
fvgPoshst			= ta.highest	(high,	5)
fvgPoslst			= ta.lowest		(low,	5)

/// ─── Math ───
var fvgArrUp		= array.new_box(na)
var fvgArrDown		= array.new_box(na)

//// ───────────────────────
/// ─── Fvg Posit ──
/// ─── Visual ─────
//// ───────────────────────

/// ─── Fvg Up ─────
if fvgDetectUp
	fvgArrUp.push(
	  box.new(bar_index[2], low, bar_index, high[2]
	  , border_color	= colFvgPosLong
	  , bgcolor			= colFvgPosLong))

/// ─── Fvg Down ───
if fvgDetectDown
	fvgArrDown.push(
	  box.new(bar_index[2],  low[2], bar_index, high
	  , border_color	= colFvgPosShort
	  , bgcolor			= colFvgPosShort))

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════╗
/// ║ 	Liquidity Void Fvg			║
/// ║ 	Vacios de liquidez			║
/// ║ 	@	Ultr.					║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

groupLiquidFvg		= "Detección de Liquidez (Fvg Void)"

vLiquidBC			= input.color		(color.new(BrLiYel30, 86),			title = 'Compra',				inline = 'vColor',			group = groupLiquidFvg)
vLiquidSC			= input.color		(color.new(BrLiYel10, 90),			title = 'Venta',				inline = 'vColor',			group = groupLiquidFvg)
vLiquidFC			= input.color		(color.new(BrLiYel10, 90),			title = 'Neutral',				inline = 'vtColor',			group = groupLiquidFvg)
vLiquidFont			= input.color		(color.new(GraySwebDivider, 80),	title = 'Fuente',				inline = 'vtColor',			group = groupLiquidFvg)

//// ───────────────────────
/// ─── Fvg Void ────
/// ─── Variables ───
//// ───────────────────────
tLiquidmdTT			= 'La opción modalidad controla el número de objetos visuales presentados, donde\n\n- Histórico, tiene en cuenta todos los datos disponibles para el usuarion\n- Presente, tiene en cuenta solo las últimas X barras especificadas en la opción de \'# Barras \' '
vLiquidTT			= 'Actúa como filtro mientras detectas los vacíos de liquidez. Cuando se establece en 0 significa que no se aplica ningún filtrado, al aumentar el valor se hace que el script compruebe el ancho del vacío en comparación con un valor de ATR de longitud fija'
vLiquidFT			= 'Alterna la visibilidad de los vacíos de liquidez cubiertos'

vLiquidVisual		= input.bool		(defval = true,					title = 'Visualizar FVG',					group = groupLiquidFvg)

vLiquidVF			= input.bool		(defval = true,					title = 'Vacíos de liquidez cubiertos',		tooltip = vLiquidFT,			group = groupLiquidFvg)
vLiquidTX			= input.bool		(defval = false,				title = 'Etiquetas',						group = groupLiquidFvg)
optModalidad		= input.string		(defval = 'Historico',			title = 'Modalidad',						options =['Actual', 'Historico'],			group = groupLiquidFvg)
vLiquidBack			= input.int			(defval = 360,					title = ' # Barras',						tooltip = tLiquidmdTT,		minval = 100,	maxval = 5000,	step = 10,			group = groupLiquidFvg)
vLiquidTH			= input.float		(defval = 0.5,					title = 'Umbral',							tooltip = vLiquidTT,		minval = 0, 	maxval = 50,	step = .1,			group = groupLiquidFvg)

//// ───────────────────────
/// ─── Fvg Void ────
/// ─── Types ───────
//// ───────────────────────

// @type		Las propiedades de la barra con sus valores 

// @field h		(float)	precio alto de la barra
// @field l		(float)	precio bajo de la barra
// @field c		(float)	precio de cierre de la barra
// @field o		(float)	precio de apertura de la barra
// @field i		(int)	índice de la barra

type HLOCIBAR
	float h = high
	float l = low
	float o = open
	float c = close
	int   i = bar_index

//// ───────────────────────
/// ─── Fvg Void ────
/// ─── Instancias ──
//// ───────────────────────

HLOCIBAR insBvoid = HLOCIBAR.new()

var vLiquidV = array.new_box()

//// ───────────────────────
/// ─── Fvg Void ────
/// ─── Math ────────
//// ───────────────────────

vLiquidPer	= optModalidad == 'Actual' ? last_bar_index - insBvoid.i <= vLiquidBack : true
vLiquidAtr	= ta.atr(144) * vLiquidTH

if vLiquidVisual and vLiquidPer
	fLiquidUp = (insBvoid.l - insBvoid.h[2]) > vLiquidAtr and insBvoid.l > insBvoid.h[2] and insBvoid.c[1] > insBvoid.h[2]

	if fLiquidUp 
		l = 13
		if fLiquidUp[1] 
			st = math.abs(insBvoid.l - insBvoid.l[1]) / l
			for i = 0 to l - 1
				array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.l[1] + (i + 1) * st, insBvoid.i, insBvoid.l[1] + i * st, na, bgcolor = vLiquidBC ))
		else   
			st = math.abs(insBvoid.l - insBvoid.h[2]) / l
			for i = 0 to l - 1
				if vLiquidTX and i == 0
					array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.h[2] + (i + 1) * st, insBvoid.i, insBvoid.h[2] + i * st, na, text = 'Fvg  ', text_size = size.tiny, text_halign = text.align_right, text_valign = text.align_bottom, text_color = vLiquidFont, bgcolor = vLiquidBC ))
				else
					array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.h[2] + (i + 1) * st, insBvoid.i, insBvoid.h[2] + i * st, na, bgcolor = vLiquidBC ))

	fLiquidDown = (insBvoid.l[2] - insBvoid.h) > vLiquidAtr and insBvoid.h < insBvoid.l[2] and insBvoid.c[1] < insBvoid.l[2]

	if fLiquidDown
		l = 13
		if fLiquidDown[1]
			st = math.abs(insBvoid.h[1] - insBvoid.h) / l
			for i = 0 to l - 1
				array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.h + (i + 1) * st, insBvoid.i, insBvoid.h + i * st, na, bgcolor = vLiquidSC ))
		else
			st = math.abs(insBvoid.l[2] - insBvoid.h) / l
			for i = 0 to l - 1
				if vLiquidTX and i == l - 1
					array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.h + (i + 1) * st, insBvoid.i, insBvoid.h + i * st, na, text = 'Fvg  ', text_size = size.tiny, text_halign = text.align_right, text_valign = text.align_top, text_color = vLiquidFont, bgcolor = vLiquidSC ))
				else
					array.push(vLiquidV, box.new(insBvoid.i - 2, insBvoid.h + (i + 1) * st, insBvoid.i, insBvoid.h + i * st, na, bgcolor = vLiquidSC ))

if vLiquidVisual and vLiquidV.size() > 0
	vLiquidFuQT = vLiquidV.size()

	for vLiqVIfbn = vLiquidFuQT - 1 to 0
		if vLiqVIfbn < vLiquidV.size()
			vLiqVFuCB = vLiquidV.get(vLiqVIfbn)
			vLiqVFutBX = vLiqVFuCB.get_top()
			vLiqVFubBX = vLiqVFuCB.get_bottom()
			if insBvoid.h > vLiqVFubBX and insBvoid.l < vLiqVFutBX
				if vLiquidVF
					vLiqVFuCB.set_bgcolor(vLiquidFC)
				else
					vLiqVFuCB.delete()
				vLiquidV.remove(vLiqVIfbn)
			else
				vLiqVFuCB.set_right(insBvoid.i + 1)

				if insBvoid.i - vLiqVFuCB.get_left() > 21
					vLiqVFuCB.set_text_color(chart.fg_color)

	if vLiquidV.size() > 500
		vLiquidV.shift()

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════╗
/// ║ 	OrderFlow Imbalance			║
/// ║ 	@	Allen.					║
/// ║ 	©	turk_shariq				║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Imbalance ──
/// ─── Variables ──
//// ───────────────────────

var ofImbgrpImbalance				= " Visualización OrderFlow Imbalance"
ofImbVaradboxcountimbalance			= input.int		(defval = 50,				title = "Rango de Visualización",	inline = "imbgl",		group = ofImbgrpImbalance)
ofImbVarboxcolorimbalance			= input.color	(color.new(BrLiYel10, 80),	title = "Color de Imbalance",		inline = "imbgl",		group = ofImbgrpImbalance)

//// ───────────────────────
/// ─── Imbalance ──
/// ─── Box Variables
//// ───────────────────────

var box[] ofImbArrofImFuimbboxarray		= array.new_box()

ofImbVartopimbalance				= low[2] <= open[1] and high[0] >= close[1]
ofImbVartopimbalancesize			= low[2] - high[0]
ofImbVarbottomimbalance				= high[2] >= open[1] and low[0] <= close[1]
ofImbVarbottomimbalancesize			= low[0] - high[2]

//// ───────────────────────
/// ─── Imbalance ──
/// ─── Box Math ───
//// ───────────────────────

ofImbFunction_choppedoffimb(ofImbArrofImFuimbboxarray) =>
	if array.size(ofImbArrofImFuimbboxarray) > 0
		for i = array.size(ofImbArrofImFuimbboxarray) - 1 to 0 by 1
			ofImFucutbox			= array.get(ofImbArrofImFuimbboxarray, i)
			ofImFuboxhighzone		= box.get_top(ofImFucutbox)
			ofImFuboxlowzone		= box.get_bottom(ofImFucutbox)
			ofImFuboxrightzone		= box.get_right(ofImFucutbox)
			if na or bar_index - 1 == ofImFuboxrightzone and not(high > ofImFuboxlowzone and low < ofImFuboxlowzone or high > ofImFuboxhighzone and low < ofImFuboxhighzone)
				box.set_right(array.get(ofImbArrofImFuimbboxarray, i), bar_index)

//// ───────────────────────
/// ─── Imbalance ──
/// ─── Box Draw ───
//// ───────────────────────

if ofImbVartopimbalance and ofImbVartopimbalancesize > 0 or ofImbVarbottomimbalance and ofImbVarbottomimbalancesize > 0
	ofImFuboxhighzone				= ofImbVartopimbalance and ofImbVartopimbalancesize > 0 ? low[2] : low[0]
	ofImFuboxlowzone				= ofImbVartopimbalance and ofImbVartopimbalancesize > 0 ? high[0] : high[2]
	ofImFuimbbox					= box.new(bar_index, ofImFuboxhighzone, bar_index, ofImFuboxlowzone, ofImbVarboxcolorimbalance, border_style = line.style_dashed, bgcolor = ofImbVarboxcolorimbalance)
	if array.size(ofImbArrofImFuimbboxarray) > ofImbVaradboxcountimbalance
		box.delete(array.shift(ofImbArrofImFuimbboxarray))
	array.push(ofImbArrofImFuimbboxarray, ofImFuimbbox)

ofImbFunction_choppedoffimb(ofImbArrofImFuimbboxarray)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════╗
/// ║	SMC Lite					║
/// ║	@	Allen.					║
/// ║	©	Pmgjiv FluidTrades		║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── SMC lite ───
/// ─── Variables ──
//// ───────────────────────

smcLiGroupSett					= 'Configuración SMC Lite'
smcLiGroupShow					= 'Visualización SMC Lite'

/// ─── Visualización
smcLiVarShowZigzag				= input.bool	(false,								title = 'Mostrar Zig Zag',					group = smcLiGroupShow,			inline = '1')
smcLiVarShowPriceActionLabels	= input.bool	(false,								title = 'Mostrar Acción de Precio',			group = smcLiGroupShow,			inline = '2')

smcLiColorZigZag				= input.color	(color.new(BrLiYel40, 40),			title = '                 Linea  ',			group = smcLiGroupShow,			inline = '1')
smcLiColorSwingType				= input.color	(PlatziBlue50,						title = '    Texto ',						group = smcLiGroupShow,			inline = '2')

smcLiColorSupply				= input.color	(color.new(AllenSky10, 70),			title = '    Oferta     ',					group = smcLiGroupShow,			inline = '3')
smcLiColorSupplyOutline			= input.color	(color.new(AllenSky10, 90),			title = '   Contorno ',						group = smcLiGroupShow,			inline = '3')

smcLiColorDemand				= input.color	(color.new(AllenMint60, 70),		title = '    Demanda ',						group = smcLiGroupShow,			inline = '4')
smcLiColorDemandOutline			= input.color	(color.new(AllenMint60, 90),		title = '   Contorno ',						group = smcLiGroupShow,			inline = '4')

// smcLiColorBOSLongLine			= input.color	(color.new(AllenSky10, 30),			title = ' Bos Compra',						group = smcLiGroupShow,			inline = '5')
// smcLiColorBOSShortLine			= input.color	(color.new(AllenMint60, 30),		title = ' Bos Venta ',						group = smcLiGroupShow,			inline = '5')

smcLiColorBOSLabel				= input.color	(color.new(MongoSky10, 100),		title = ' BOS Texto  ',						group = smcLiGroupShow,			inline = '6')
smcLiColorPOILabel				= input.color	(color.new(MongoSky10, 20),			title = '   POI Texto ',					group = smcLiGroupShow,			inline = '6')

/// ─── Configuración
smcLiVarSwingLength				= input.int		(10,								title = 'Longitud de Oscilación High/Low',	group = smcLiGroupSett,			minval = 1,	maxval = 50)
smcLiVarHistoryDemandKeep		= input.int		(20,								title = 'Historico',						group = smcLiGroupSett,			minval = 5,	maxval = 50)
smcLiVarBoxWidth				= input.float	(2.5,								title = 'Box de oferta y demanda',			group = smcLiGroupSett,			minval = 1,	maxval = 10,	step = 0.5)

//// ───────────────────────
/// ─── SMC lite ───
/// ─── Functions ──
//// ───────────────────────

/// ─── Function to add new and remove last in array
smcLiVarFunctionArrayAddPop(array, smLiFuNewValueAdd) =>
	array.unshift(array, smLiFuNewValueAdd)
	array.pop(array)

/// ─── Function swing h & l labels
smcLiVarFunctionShSlLabels(array, smLiFuSwingType) =>

	var string smLiFuLabelText = na
	if smLiFuSwingType == 1
		if array.get(array, 0) >= array.get(array, 1)
			smLiFuLabelText := 'HH'
		else
			smLiFuLabelText := 'LH'
		label.new(bar_index - smcLiVarSwingLength, array.get(array,0), text = smLiFuLabelText, style=label.style_label_down, textcolor = smcLiColorSwingType, color = color.new(smcLiColorSwingType, 100), size = size.tiny)
	
	else if smLiFuSwingType == -1
		if array.get(array, 0) >= array.get(array, 1)
			smLiFuLabelText := 'HL'
		else
			smLiFuLabelText := 'LL'
		label.new(bar_index - smcLiVarSwingLength, array.get(array,0), text = smLiFuLabelText, style=label.style_label_up, textcolor = smcLiColorSwingType, color = color.new(smcLiColorSwingType, 100), size = size.tiny)

/// ─── Function make sure supply isnt overlapping
smcLiVarFunctionCheckOverlapping(smLiFuNewPOI, smLiFuBoxArray, smLiFuATR) =>

	smLiFuATRThreshold			= smLiFuATR * 2
	smLiFuOkayToDraw			= true

	for i = 0 to array.size(smLiFuBoxArray) - 1
		top				= box.get_top(array.get(smLiFuBoxArray, i))
		bottom			= box.get_bottom(array.get(smLiFuBoxArray, i))
		smLiFuPOI				= (top + bottom) / 2

		smLiFuUpperBoundary		= smLiFuPOI + smLiFuATRThreshold
		smLiFuLowerBoundary		= smLiFuPOI - smLiFuATRThreshold

		if smLiFuNewPOI >= smLiFuLowerBoundary and smLiFuNewPOI <= smLiFuUpperBoundary
			smLiFuOkayToDraw	:= false
			break
		else 
			smLiFuOkayToDraw 	:= true
	smLiFuOkayToDraw

/// ─── Function to draw supply or demand zone
smcLiVarFunctionSupplyDemand(value_array, bn_array, smLiFuBoxArray, smLiFuLabelArray, smLiFuBoxType, smLiFuATR) =>

	smLiFuATRBbuffer	= smLiFuATR * (smcLiVarBoxWidth / 10)
	smLiFuBoxLeft		= array.get(bn_array, 0)
	smLiFuBoxRight		= bar_index

	var float smLiFuBoxTop		= 0.00
	var float smLiFuBoxBottom	= 0.00
	var float smLiFuPOI			= 0.00

	if smLiFuBoxType == 1
		smLiFuBoxTop := array.get(value_array, 0)
		smLiFuBoxBottom := smLiFuBoxTop - smLiFuATRBbuffer
		smLiFuPOI := (smLiFuBoxTop + smLiFuBoxBottom) / 2
	else if smLiFuBoxType == -1
		smLiFuBoxBottom := array.get(value_array, 0)
		smLiFuBoxTop := smLiFuBoxBottom + smLiFuATRBbuffer
		smLiFuPOI := (smLiFuBoxTop + smLiFuBoxBottom) / 2

	smLiFuOkayToDraw = smcLiVarFunctionCheckOverlapping(smLiFuPOI, smLiFuBoxArray, smLiFuATR)
	/// smLiFuOkayToDraw = true

	/// delete oldest box, and then create a new box and add it to the array
	if smLiFuBoxType == 1 and smLiFuOkayToDraw
		box.delete( array.get(smLiFuBoxArray, array.size(smLiFuBoxArray) - 1) )
		smcLiVarFunctionArrayAddPop(smLiFuBoxArray, box.new( left = smLiFuBoxLeft, top = smLiFuBoxTop, right = smLiFuBoxRight, bottom = smLiFuBoxBottom, border_color = smcLiColorSupplyOutline,
			 bgcolor = smcLiColorSupply, extend = extend.right, text = 'SUPPLY', text_halign = text.align_center, text_valign = text.align_center, text_color = smcLiColorPOILabel, text_size = size.small, xloc = xloc.bar_index))
		
		box.delete( array.get(smLiFuLabelArray, array.size(smLiFuLabelArray) - 1) )
		smcLiVarFunctionArrayAddPop(smLiFuLabelArray, box.new( left = smLiFuBoxLeft, top = smLiFuPOI, right = smLiFuBoxRight, bottom = smLiFuPOI, border_color = color.new(smcLiColorPOILabel,90),
			 bgcolor = color.new(smcLiColorPOILabel,80), extend = extend.right, text = 'POI', text_halign = text.align_left, text_valign = text.align_center, text_color = smcLiColorPOILabel, text_size = size.small, xloc = xloc.bar_index))

	else if smLiFuBoxType == -1 and smLiFuOkayToDraw
		box.delete( array.get(smLiFuBoxArray, array.size(smLiFuBoxArray) - 1) )
		smcLiVarFunctionArrayAddPop(smLiFuBoxArray, box.new( left = smLiFuBoxLeft, top = smLiFuBoxTop, right = smLiFuBoxRight, bottom = smLiFuBoxBottom, border_color = smcLiColorDemandOutline,
			 bgcolor = smcLiColorDemand, extend = extend.right,  text = 'DEMAND', text_halign = text.align_center, text_valign = text.align_center, text_color = smcLiColorPOILabel, text_size = size.small, xloc = xloc.bar_index))
		
		box.delete( array.get(smLiFuLabelArray, array.size(smLiFuLabelArray) - 1) )
		smcLiVarFunctionArrayAddPop(smLiFuLabelArray, box.new( left = smLiFuBoxLeft, top = smLiFuPOI, right = smLiFuBoxRight, bottom = smLiFuPOI, border_color = color.new(smcLiColorPOILabel,90),
			 bgcolor = color.new(smcLiColorPOILabel,80), extend = extend.right,  text = 'POI', text_halign = text.align_left, text_valign = text.align_center, text_color = smcLiColorPOILabel, text_size = size.small, xloc = xloc.bar_index))


/// ─── Function to change supply/demand to a bos if broken
smcLiVarFunctionSdToBos(smLiFuBoxArray, smLiFuBOSArray, smLiFuLabelArray, smLiFuZoneType) =>

	if smLiFuZoneType == 1
		for i = 0 to array.size(smLiFuBoxArray) - 1
			smLiFuLevelToBreak = box.get_top(array.get(smLiFuBoxArray,i))

			/// if ta.crossover(close, smLiFuLevelToBreak)
			if close >= smLiFuLevelToBreak
				smLiFuCopiedBox = box.copy(array.get(smLiFuBoxArray,i))
				smcLiVarFunctionArrayAddPop(smLiFuBOSArray, smLiFuCopiedBox)
				smLiFuMID = (box.get_top(array.get(smLiFuBoxArray,i)) + box.get_bottom(array.get(smLiFuBoxArray,i))) / 2
				box.set_top(array.get(smLiFuBOSArray,0), smLiFuMID)
				box.set_bottom(array.get(smLiFuBOSArray,0), smLiFuMID)
				box.set_extend( array.get(smLiFuBOSArray,0), extend.none)
				box.set_right( array.get(smLiFuBOSArray,0), bar_index)
				box.set_text( array.get(smLiFuBOSArray,0), 'Bos' )
				box.set_text_color( array.get(smLiFuBOSArray,0), smcLiColorBOSLabel)
				box.set_text_size( array.get(smLiFuBOSArray,0), size.small)
				box.set_text_halign( array.get(smLiFuBOSArray,0), text.align_center)
				box.set_text_valign( array.get(smLiFuBOSArray,0), text.align_center)
				box.delete(array.get(smLiFuBoxArray, i))
				box.delete(array.get(smLiFuLabelArray, i))

	if smLiFuZoneType == -1
		for i = 0 to array.size(smLiFuBoxArray) - 1
			smLiFuLevelToBreak = box.get_bottom(array.get(smLiFuBoxArray,i))
			/// if ta.crossunder(close, smLiFuLevelToBreak)
			if close <= smLiFuLevelToBreak
				smLiFuCopiedBox = box.copy(array.get(smLiFuBoxArray,i))
				smcLiVarFunctionArrayAddPop(smLiFuBOSArray, smLiFuCopiedBox)
				smLiFuMID = (box.get_top(array.get(smLiFuBoxArray,i)) + box.get_bottom(array.get(smLiFuBoxArray,i))) / 2
				box.set_top(array.get(smLiFuBOSArray,0), smLiFuMID)
				box.set_bottom(array.get(smLiFuBOSArray,0), smLiFuMID)
				box.set_extend( array.get(smLiFuBOSArray,0), extend.none)
				box.set_right( array.get(smLiFuBOSArray,0), bar_index)
				box.set_text( array.get(smLiFuBOSArray,0), 'Bos' )
				box.set_text_color( array.get(smLiFuBOSArray,0), smcLiColorBOSLabel)
				box.set_text_size( array.get(smLiFuBOSArray,0), size.small)
				box.set_text_halign( array.get(smLiFuBOSArray,0), text.align_center)
				box.set_text_valign( array.get(smLiFuBOSArray,0), text.align_center)
				box.delete(array.get(smLiFuBoxArray, i))
				box.delete(array.get(smLiFuLabelArray, i))

/// ─── Function manage current boxes by changing endpoint
smcLiVarFunctionExtendBoxEndpoint(smLiFuBoxArray) =>

	for i = 0 to array.size(smLiFuBoxArray) - 1
		box.set_right(array.get(smLiFuBoxArray, i), bar_index + 100)

//// ───────────────────────
/// ─── SMC lite ───
/// ─── Math ──
//// ───────────────────────

/// ─── Calculate atr 
smLiFuATR						= ta.atr(50)

/// ─── Calculate swing highs & swing lows
smLiVarSwingHigh				= ta.pivothigh(high, smcLiVarSwingLength, smcLiVarSwingLength)
smcLiVarSwingLow				= ta.pivotlow(low, smcLiVarSwingLength, smcLiVarSwingLength)

/// ─── Arrays for swing h/l & bn 
var smcLiVarSwingHighValues 	= array.new_float(5,0.00)
var smcLiVarSwingLowValues		= array.new_float(5,0.00)

var smcLiVarSwingHighBns		= array.new_int(5,0)
var smcLiVarSwingLowBns			= array.new_int(5,0)

/// ─── Arrays for supply / demand
var smcLiVarCurrentSupplyBox	= array.new_box(smcLiVarHistoryDemandKeep, na)
var smcLiVarCurrentDemandBox	= array.new_box(smcLiVarHistoryDemandKeep, na)

/// ─── Arrays for supply / demand poi labels
var smcLiVarCurrentSupplyPOI	= array.new_box(smcLiVarHistoryDemandKeep, na)
var smcLiVarCurrentDemandPOI	= array.new_box(smcLiVarHistoryDemandKeep, na)

/// ─── Arrays for bos
var smcLiVarSupplyBOS			= array.new_box(5, na)
var smcLiVarDemandBOS			= array.new_box(5, na)

//// ───────────────────────
/// ─── SMC lite ───
/// ─── Swing ──────
//// ───────────────────────

/// ─── New swing high
if not na(smLiVarSwingHigh)

	/// Manage swing high values
	smcLiVarFunctionArrayAddPop(smcLiVarSwingHighValues, smLiVarSwingHigh)
	smcLiVarFunctionArrayAddPop(smcLiVarSwingHighBns, bar_index[smcLiVarSwingLength])
	if smcLiVarShowPriceActionLabels
		smcLiVarFunctionShSlLabels(smcLiVarSwingHighValues, 1)

	smcLiVarFunctionSupplyDemand(smcLiVarSwingHighValues, smcLiVarSwingHighBns, smcLiVarCurrentSupplyBox, smcLiVarCurrentSupplyPOI, 1, smLiFuATR)

/// ─── NEW SWING LOW
else if not na(smcLiVarSwingLow)

	/// Manage swing low values
	smcLiVarFunctionArrayAddPop(smcLiVarSwingLowValues, smcLiVarSwingLow)
	smcLiVarFunctionArrayAddPop(smcLiVarSwingLowBns, bar_index[smcLiVarSwingLength])
	if smcLiVarShowPriceActionLabels
		smcLiVarFunctionShSlLabels(smcLiVarSwingLowValues, -1)
	
	smcLiVarFunctionSupplyDemand(smcLiVarSwingLowValues, smcLiVarSwingLowBns, smcLiVarCurrentDemandBox, smcLiVarCurrentDemandPOI, -1, smLiFuATR)


smcLiVarFunctionSdToBos(smcLiVarCurrentSupplyBox, smcLiVarSupplyBOS, smcLiVarCurrentSupplyPOI, 1)
smcLiVarFunctionSdToBos(smcLiVarCurrentDemandBox, smcLiVarDemandBOS, smcLiVarCurrentDemandPOI, -1)

smcLiVarFunctionExtendBoxEndpoint(smcLiVarCurrentSupplyBox)
smcLiVarFunctionExtendBoxEndpoint(smcLiVarCurrentDemandBox)

/// ─── ZIG ZAG
smcLiVarHighest				= ta.highest(high, smcLiVarSwingLength * 2 + 1)
smcLiVarLowest				= ta.lowest(low, smcLiVarSwingLength * 2 + 1)
f_isMin(len) =>
	smcLiVarLowest == low[len]
f_isMax(len) =>
	smcLiVarHighest == high[len]

var smcLiVarDirUp			= false
var smcLiVarLastLow			= high * 100
var smcLiVarLastHigh		= 0.0
var smcLiVarTimeLow			= bar_index
var smcLiVarTimeHigh		= bar_index
var line smcLiVarLI			= na

smcLiVarFunctionDrawLine() =>
	smcLiColorLine = smcLiVarShowZigzag ? smcLiColorZigZag : color.new(#ffffff, 100)
	line.new(smcLiVarTimeHigh - smcLiVarSwingLength, smcLiVarLastHigh, smcLiVarTimeLow - smcLiVarSwingLength, smcLiVarLastLow, xloc.bar_index, color = smcLiColorLine, width = 2)

if smcLiVarDirUp
	if f_isMin(smcLiVarSwingLength) and low[smcLiVarSwingLength] < smcLiVarLastLow
		smcLiVarLastLow := low[smcLiVarSwingLength]
		smcLiVarTimeLow := bar_index
		line.delete(smcLiVarLI)
		smcLiVarLI := smcLiVarFunctionDrawLine()
		smcLiVarLI

	if f_isMax(smcLiVarSwingLength) and high[smcLiVarSwingLength] > smcLiVarLastLow
		smcLiVarLastHigh := high[smcLiVarSwingLength]
		smcLiVarTimeHigh := bar_index
		smcLiVarDirUp := false
		smcLiVarLI := smcLiVarFunctionDrawLine()
		smcLiVarLI

if not smcLiVarDirUp
	if f_isMax(smcLiVarSwingLength) and high[smcLiVarSwingLength] > smcLiVarLastHigh
		smcLiVarLastHigh := high[smcLiVarSwingLength]
		smcLiVarTimeHigh := bar_index
		line.delete(smcLiVarLI)
		smcLiVarLI := smcLiVarFunctionDrawLine()
		smcLiVarLI
	if f_isMin(smcLiVarSwingLength) and low[smcLiVarSwingLength] < smcLiVarLastHigh
		smcLiVarLastLow := low[smcLiVarSwingLength]
		smcLiVarTimeLow := bar_index
		smcLiVarDirUp := true
		smcLiVarLI := smcLiVarFunctionDrawLine()
		if f_isMax(smcLiVarSwingLength) and high[smcLiVarSwingLength] > smcLiVarLastLow
			smcLiVarLastHigh := high[smcLiVarSwingLength]
			smcLiVarTimeHigh := bar_index
			smcLiVarDirUp := false
			smcLiVarLI := smcLiVarFunctionDrawLine()
			smcLiVarLI

//// ─────────────────────────────────────────────────────────────────────
